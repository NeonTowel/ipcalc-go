version: '3'

vars:
  BINARY_NAME: ipcalc
  VERSION: 0.1.0
  DIST_DIR: ./dist
  # You'll need to set your VirusTotal API key as an environment variable
  # or replace this with your actual API key (not recommended for public repos)
  VT_API_KEY: '{{.VT_API_KEY | default ""}}'
  VT_CLI_VERSION: '1.0.1'

tasks:
  deps:test:
    desc: Install dependencies
    cmds:
      - go install github.com/securego/gosec/v2/cmd/gosec@latest
      - go install github.com/google/osv-scanner/v2/cmd/osv-scanner@latest
      # Install VirusTotal CLI by downloading the pre-compiled binary
      - task: install-vt-cli

  install-vt-cli:
    desc: Install VirusTotal CLI
    internal: true
    cmds:
      - |
        echo "Installing VirusTotal CLI v{{.VT_CLI_VERSION}}..."
        {{if eq OS "windows"}}
        # Try to install using winget first
        powershell -Command "if (Get-Command winget -ErrorAction SilentlyContinue) { winget install VirusTotal.vt-cli -e } else { Write-Host 'winget not found, trying chocolatey...' }"
        
        # If winget fails, try chocolatey
        powershell -Command "if (-not (Get-Command vt -ErrorAction SilentlyContinue) -and (Get-Command choco -ErrorAction SilentlyContinue)) { choco install vt-cli -y }"
        
        # If both fail, download manually
        powershell -Command "if (-not (Get-Command vt -ErrorAction SilentlyContinue)) { Write-Host 'Manual download required. Please download from https://github.com/VirusTotal/vt-cli/releases/download/v{{.VT_CLI_VERSION}}/vt-windows-386.zip and extract to a directory in your PATH' }"
        
        echo "VirusTotal CLI installation attempted. Please ensure 'vt' is in your PATH."
        {{else if eq OS "darwin"}}
        mkdir -p $HOME/bin
        curl -L -o $HOME/bin/vt.tar.gz https://github.com/VirusTotal/vt-cli/releases/download/v{{.VT_CLI_VERSION}}/vt-darwin-amd64.tar.gz
        cd $HOME/bin && tar -xzf vt.tar.gz && rm vt.tar.gz
        # Move the vt binary to the correct location if it's in a subdirectory
        find $HOME/bin -name "vt" -type f -exec mv {} $HOME/bin/ \; 2>/dev/null || true
        chmod +x $HOME/bin/vt
        echo "VirusTotal CLI installed to $HOME/bin"
        # Verify installation
        ls -la $HOME/bin
        $HOME/bin/vt --version || echo "Warning: vt command not working properly"
        {{else}}
        mkdir -p $HOME/bin
        curl -L -o $HOME/bin/vt.tar.gz https://github.com/VirusTotal/vt-cli/releases/download/v{{.VT_CLI_VERSION}}/vt-linux-amd64.tar.gz
        cd $HOME/bin && tar -xzf vt.tar.gz && rm vt.tar.gz
        # Move the vt binary to the correct location if it's in a subdirectory
        find $HOME/bin -name "vt" -type f -exec mv {} $HOME/bin/ \; 2>/dev/null || true
        chmod +x $HOME/bin/vt
        echo "VirusTotal CLI installed to $HOME/bin"
        # Verify installation
        ls -la $HOME/bin
        $HOME/bin/vt --version || echo "Warning: vt command not working properly"
        {{end}}

  build:
    deps: [fmt]
    desc: Build the ipcalc binary
    cmds:
      - go build -o {{.BINARY_NAME}}{{if eq OS "windows"}}.exe{{end}} ./cmd/ipcalc

  test:
    deps: [gosec, osv-scanner]
    desc: Run tests
    cmds:
      - go test ./...

  clean:
    desc: Clean build artifacts
    cmds:
      - '{{if eq OS "windows"}}del {{.BINARY_NAME}}.exe{{else}}rm -f {{.BINARY_NAME}}{{end}}'
      - rm -rf {{.DIST_DIR}}

  release:
    desc: Build release binaries for all platforms
    deps: [security-check]
    cmds:
      - mkdir -p {{.DIST_DIR}}
      # Windows build
      - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}.exe ./cmd/ipcalc
      - cd {{.DIST_DIR}} && zip {{.BINARY_NAME}}-windows-amd64.zip {{.BINARY_NAME}}.exe
      
      # Linux build
      - GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}-linux-amd64 ./cmd/ipcalc
      - cd {{.DIST_DIR}} && tar -czvf {{.BINARY_NAME}}-linux-amd64.tar.gz {{.BINARY_NAME}}-linux-amd64
      
      # macOS builds
      - GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-amd64 ./cmd/ipcalc
      - cd {{.DIST_DIR}} && tar -czvf {{.BINARY_NAME}}-darwin-amd64.tar.gz {{.BINARY_NAME}}-darwin-amd64
      
      - GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-arm64 ./cmd/ipcalc
      - cd {{.DIST_DIR}} && tar -czvf {{.BINARY_NAME}}-darwin-arm64.tar.gz {{.BINARY_NAME}}-darwin-arm64
      
      # Generate checksums
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-windows-amd64.zip > {{.BINARY_NAME}}-windows-amd64.zip.sha256
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-linux-amd64.tar.gz > {{.BINARY_NAME}}-linux-amd64.tar.gz.sha256
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-darwin-amd64.tar.gz > {{.BINARY_NAME}}-darwin-amd64.tar.gz.sha256
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-darwin-arm64.tar.gz > {{.BINARY_NAME}}-darwin-arm64.tar.gz.sha256
      
      # Combined checksums file
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-windows-amd64.zip {{.BINARY_NAME}}-linux-amd64.tar.gz {{.BINARY_NAME}}-darwin-amd64.tar.gz {{.BINARY_NAME}}-darwin-arm64.tar.gz > checksums.txt
      
      # Scan binaries with VirusTotal if API key is available
      - task: virustotal-scan

  virustotal-scan:
    desc: Scan binaries with VirusTotal
    internal: true
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "
          if (-not [string]::IsNullOrEmpty('{{.VT_API_KEY}}')) {
            Write-Host 'Scanning binaries with VirusTotal...'
            
            # Check if vt is installed
            if (-not (Get-Command vt -ErrorAction SilentlyContinue)) { 
              Write-Host 'VirusTotal CLI not found in PATH. Skipping scan.' -ForegroundColor Yellow
              exit 0 
            }
            
            # Windows paths with PowerShell
            vt scan file '{{.DIST_DIR}}/{{.BINARY_NAME}}.exe' --apikey '{{.VT_API_KEY}}'
            vt scan file '{{.DIST_DIR}}/{{.BINARY_NAME}}-linux-amd64' --apikey '{{.VT_API_KEY}}'
            vt scan file '{{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-amd64' --apikey '{{.VT_API_KEY}}'
            vt scan file '{{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-arm64' --apikey '{{.VT_API_KEY}}'
            
            Write-Host 'VirusTotal scan complete. Check results at https://www.virustotal.com/'
          } else {
            Write-Host 'VirusTotal API key not set. Skipping virus scan.'
            Write-Host 'To enable scanning, set the VT_API_KEY environment variable.'
          }
        "
        {{else}}
        # Unix version
        if [ -n "{{.VT_API_KEY}}" ]; then
          echo "Scanning binaries with VirusTotal..."
          
          # Find vt binary - try multiple locations
          VT_BIN=""
          for path in "$HOME/bin/vt" "/usr/local/bin/vt" "$(which vt 2>/dev/null)"; do
            if [ -x "$path" ]; then
              VT_BIN="$path"
              break
            fi
          done
          
          if [ -z "$VT_BIN" ]; then
            echo "Error: VirusTotal CLI not found. Skipping scan."
            exit 0
          fi
          
          echo "Using VirusTotal CLI at: $VT_BIN"
          
          # Unix paths
          "$VT_BIN" scan file {{.DIST_DIR}}/{{.BINARY_NAME}}.exe --apikey {{.VT_API_KEY}}
          "$VT_BIN" scan file {{.DIST_DIR}}/{{.BINARY_NAME}}-linux-amd64 --apikey {{.VT_API_KEY}}
          "$VT_BIN" scan file {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-amd64 --apikey {{.VT_API_KEY}}
          "$VT_BIN" scan file {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-arm64 --apikey {{.VT_API_KEY}}
          
          echo "VirusTotal scan complete. Check results at https://www.virustotal.com/"
        else
          echo "VirusTotal API key not set. Skipping virus scan."
          echo "To enable scanning, set the VT_API_KEY environment variable."
        fi
        {{end}}

  security-check:
    desc: Run all security checks
    deps: [gosec, osv-scanner]
    cmds:
      - echo "All security checks passed!"

  install:
    desc: Install ipcalc to the system
    deps: [build]
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "$binDir = \"$env:USERPROFILE\bin\"; if (-not (Test-Path $binDir)) { New-Item -ItemType Directory -Path $binDir | Out-Null }; Copy-Item -Path \"{{.BINARY_NAME}}.exe\" -Destination \"$binDir\" -Force; $userPath = [Environment]::GetEnvironmentVariable(\"PATH\", \"User\"); if (-not $userPath.Contains($binDir)) { [Environment]::SetEnvironmentVariable(\"PATH\", \"$userPath;$binDir\", \"User\"); $env:PATH = \"$env:PATH;$binDir\" }"
        echo "Installation successful. You can now run 'ipcalc' from anywhere."
        echo "Note: You may need to restart your terminal for the PATH changes to take effect."
        {{else if eq OS "darwin"}}
        mkdir -p /usr/local/bin
        cp {{.BINARY_NAME}} /usr/local/bin/
        echo "Installation successful. You can now run 'ipcalc' from anywhere."
        {{else}}
        sudo mkdir -p /usr/local/bin
        sudo cp {{.BINARY_NAME}} /usr/local/bin/
        echo "Installation successful. You can now run 'ipcalc' from anywhere."
        {{end}}

  uninstall:
    desc: Uninstall ipcalc from the system
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "Remove-Item \"$env:USERPROFILE\bin\{{.BINARY_NAME}}.exe\" -Force -ErrorAction SilentlyContinue"
        echo "Uninstallation successful."
        {{else if eq OS "darwin"}}
        rm -f /usr/local/bin/{{.BINARY_NAME}}
        echo "Uninstallation successful."
        {{else}}
        sudo rm -f /usr/local/bin/{{.BINARY_NAME}}
        echo "Uninstallation successful."
        {{end}}

  gosec:
    cmds:
      - gosec ./...
    desc: "Run gosec to check for security vulnerabilities."

  osv-scanner:
    cmds:
      - osv-scanner scan .
    desc: "Run osv-scanner to check for vulnerabilities."

  fmt:
    cmds:
      - go fmt ./...
    desc: "Run go fmt to format the entire project."

  default:
    - task --list

  all:
    desc: Build, test, and install
    deps: [clean, test, install]

  test-vt:
    desc: Test VirusTotal scanning
    cmds:
      - task: virustotal-scan 