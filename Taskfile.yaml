version: '3'

vars:
  BINARY_NAME: ipcalc
  VERSION: 0.1.0
  DIST_DIR: ./dist
  # You'll need to set your VirusTotal API key as an environment variable
  # or replace this with your actual API key (not recommended for public repos)
  VT_API_KEY: '{{.VT_API_KEY | default ""}}'

tasks:
  deps:test:
    desc: Install dependencies
    cmds:
      - go install github.com/securego/gosec/v2/cmd/gosec@latest
      - go install github.com/google/osv-scanner/v2/cmd/osv-scanner@latest
      - go install github.com/VirusTotal/vt-cli@latest

  build:
    deps: [fmt]
    desc: Build the ipcalc binary
    cmds:
      - go build -o {{.BINARY_NAME}}{{if eq OS "windows"}}.exe{{end}} ./cmd/ipcalc

  test:
    deps: [gosec, osv-scanner]
    desc: Run tests
    cmds:
      - go test ./...

  clean:
    desc: Clean build artifacts
    cmds:
      - '{{if eq OS "windows"}}del {{.BINARY_NAME}}.exe{{else}}rm -f {{.BINARY_NAME}}{{end}}'
      - rm -rf {{.DIST_DIR}}

  release:
    desc: Build release binaries for all platforms
    deps: [security-check]
    cmds:
      - mkdir -p {{.DIST_DIR}}
      # Windows build
      - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}.exe ./cmd/ipcalc
      - cd {{.DIST_DIR}} && zip {{.BINARY_NAME}}-windows-amd64.zip {{.BINARY_NAME}}.exe
      
      # Linux build
      - GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}-linux-amd64 ./cmd/ipcalc
      - cd {{.DIST_DIR}} && tar -czvf {{.BINARY_NAME}}-linux-amd64.tar.gz {{.BINARY_NAME}}-linux-amd64
      
      # macOS builds
      - GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-amd64 ./cmd/ipcalc
      - cd {{.DIST_DIR}} && tar -czvf {{.BINARY_NAME}}-darwin-amd64.tar.gz {{.BINARY_NAME}}-darwin-amd64
      
      - GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-arm64 ./cmd/ipcalc
      - cd {{.DIST_DIR}} && tar -czvf {{.BINARY_NAME}}-darwin-arm64.tar.gz {{.BINARY_NAME}}-darwin-arm64
      
      # Generate checksums
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-windows-amd64.zip > {{.BINARY_NAME}}-windows-amd64.zip.sha256
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-linux-amd64.tar.gz > {{.BINARY_NAME}}-linux-amd64.tar.gz.sha256
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-darwin-amd64.tar.gz > {{.BINARY_NAME}}-darwin-amd64.tar.gz.sha256
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-darwin-arm64.tar.gz > {{.BINARY_NAME}}-darwin-arm64.tar.gz.sha256
      
      # Combined checksums file
      - cd {{.DIST_DIR}} && sha256sum {{.BINARY_NAME}}-windows-amd64.zip {{.BINARY_NAME}}-linux-amd64.tar.gz {{.BINARY_NAME}}-darwin-amd64.tar.gz {{.BINARY_NAME}}-darwin-arm64.tar.gz > checksums.txt
      
      # Scan binaries with VirusTotal if API key is available
      - task: virustotal-scan

  virustotal-scan:
    desc: Scan binaries with VirusTotal
    internal: true
    cmds:
      - |
        if [ -n "{{.VT_API_KEY}}" ]; then
          echo "Scanning binaries with VirusTotal..."
          
          # Scan Windows binary
          vt scan file {{.DIST_DIR}}/{{.BINARY_NAME}}.exe --apikey {{.VT_API_KEY}}
          
          # Scan Linux binary
          vt scan file {{.DIST_DIR}}/{{.BINARY_NAME}}-linux-amd64 --apikey {{.VT_API_KEY}}
          
          # Scan macOS binaries
          vt scan file {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-amd64 --apikey {{.VT_API_KEY}}
          vt scan file {{.DIST_DIR}}/{{.BINARY_NAME}}-darwin-arm64 --apikey {{.VT_API_KEY}}
          
          echo "VirusTotal scan complete. Check results at https://www.virustotal.com/"
        else
          echo "VirusTotal API key not set. Skipping virus scan."
          echo "To enable scanning, set the VT_API_KEY environment variable."
        fi

  security-check:
    desc: Run all security checks
    deps: [gosec, osv-scanner]
    cmds:
      - echo "All security checks passed!"

  install:
    desc: Install ipcalc to the system
    deps: [build]
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "$binDir = \"$env:USERPROFILE\bin\"; if (-not (Test-Path $binDir)) { New-Item -ItemType Directory -Path $binDir | Out-Null }; Copy-Item -Path \"{{.BINARY_NAME}}.exe\" -Destination \"$binDir\" -Force; $userPath = [Environment]::GetEnvironmentVariable(\"PATH\", \"User\"); if (-not $userPath.Contains($binDir)) { [Environment]::SetEnvironmentVariable(\"PATH\", \"$userPath;$binDir\", \"User\"); $env:PATH = \"$env:PATH;$binDir\" }"
        echo "Installation successful. You can now run 'ipcalc' from anywhere."
        echo "Note: You may need to restart your terminal for the PATH changes to take effect."
        {{else if eq OS "darwin"}}
        mkdir -p /usr/local/bin
        cp {{.BINARY_NAME}} /usr/local/bin/
        echo "Installation successful. You can now run 'ipcalc' from anywhere."
        {{else}}
        sudo mkdir -p /usr/local/bin
        sudo cp {{.BINARY_NAME}} /usr/local/bin/
        echo "Installation successful. You can now run 'ipcalc' from anywhere."
        {{end}}

  uninstall:
    desc: Uninstall ipcalc from the system
    cmds:
      - |
        {{if eq OS "windows"}}
        powershell -Command "Remove-Item \"$env:USERPROFILE\bin\{{.BINARY_NAME}}.exe\" -Force -ErrorAction SilentlyContinue"
        echo "Uninstallation successful."
        {{else if eq OS "darwin"}}
        rm -f /usr/local/bin/{{.BINARY_NAME}}
        echo "Uninstallation successful."
        {{else}}
        sudo rm -f /usr/local/bin/{{.BINARY_NAME}}
        echo "Uninstallation successful."
        {{end}}

  gosec:
    cmds:
      - gosec ./...
    desc: "Run gosec to check for security vulnerabilities."

  osv-scanner:
    cmds:
      - osv-scanner scan .
    desc: "Run osv-scanner to check for vulnerabilities."

  fmt:
    cmds:
      - go fmt ./...
    desc: "Run go fmt to format the entire project."

  default:
    - task --list

  all:
    desc: Build, test, and install
    deps: [clean, test, install] 